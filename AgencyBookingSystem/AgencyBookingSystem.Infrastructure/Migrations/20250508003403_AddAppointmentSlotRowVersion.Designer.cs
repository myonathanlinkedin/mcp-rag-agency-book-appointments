// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgencyBookingSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AgencyBookingDbContext))]
    [Migration("20250508003403_AddAppointmentSlotRowVersion")]
    partial class AddAppointmentSlotRowVersion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgencyBookingSystem.Domain.Models.Agency", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnType("nvarchar(150)");

                b.Property<bool>("IsApproved")
                    .HasColumnType("bit");

                b.Property<int>("MaxAppointmentsPerDay")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<bool>("RequiresApproval")
                    .HasColumnType("bit");

                b.HasKey("Id");

                b.ToTable("Agencies");
            });

            modelBuilder.Entity("AgencyBookingSystem.Domain.Models.AgencyUser", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("AgencyId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnType("nvarchar(150)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("PhoneNumber")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)");

                b.HasKey("Id");

                b.HasIndex("AgencyId");

                b.ToTable("AgencyUsers");
            });

            modelBuilder.Entity("AgencyBookingSystem.Domain.Models.Appointment", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("AgencyId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("AgencyUserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("CancellationReason")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("ReferenceNumber")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<int>("Status")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("AgencyId");

                b.HasIndex("AgencyUserId");

                b.ToTable("Appointments");
            });

            modelBuilder.Entity("AgencyBookingSystem.Domain.Models.AppointmentSlot", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("AgencyId")
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("Capacity")
                    .HasColumnType("int");

                b.Property<DateTime>("EndTime")
                    .HasColumnType("datetime2");

                b.Property<byte[]>("RowVersion")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("rowversion");

                b.Property<DateTime>("StartTime")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("AgencyId", "StartTime")
                    .IsUnique()
                    .HasDatabaseName("IX_AppointmentSlot_AgencyId_StartTime");

                b.ToTable("AppointmentSlots");
            });

            modelBuilder.Entity("AgencyBookingSystem.Domain.Models.Holiday", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("AgencyId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<string>("Reason")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnType("nvarchar(200)");

                b.HasKey("Id");

                b.HasIndex("AgencyId");

                b.ToTable("Holidays");
            });

            modelBuilder.Entity("AgencyBookingSystem.Domain.Models.AgencyUser", b =>
            {
                b.HasOne("AgencyBookingSystem.Domain.Models.Agency", null)
                    .WithMany("AgencyUsers")
                    .HasForeignKey("AgencyId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("AgencyBookingSystem.Domain.Models.Appointment", b =>
            {
                b.HasOne("AgencyBookingSystem.Domain.Models.Agency", null)
                    .WithMany()
                    .HasForeignKey("AgencyId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("AgencyBookingSystem.Domain.Models.AgencyUser", "AgencyUser")
                    .WithMany()
                    .HasForeignKey("AgencyUserId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("AgencyUser");
            });

            modelBuilder.Entity("AgencyBookingSystem.Domain.Models.AppointmentSlot", b =>
            {
                b.HasOne("AgencyBookingSystem.Domain.Models.Agency", null)
                    .WithMany("Slots")
                    .HasForeignKey("AgencyId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("AgencyBookingSystem.Domain.Models.Holiday", b =>
            {
                b.HasOne("AgencyBookingSystem.Domain.Models.Agency", null)
                    .WithMany("Holidays")
                    .HasForeignKey("AgencyId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("AgencyBookingSystem.Domain.Models.Agency", b =>
            {
                b.Navigation("AgencyUsers");

                b.Navigation("Holidays");

                b.Navigation("Slots");
            });
        }
    }
} 