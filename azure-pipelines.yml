trigger:
- main

pool:
  vmImage: 'ubuntu-latest'  # Changed to Ubuntu for better compatibility with containerized apps

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  webAppName: 'agency-book-appointments'
  azureServiceConnection: 'your-azure-service-connection'
  dotnetVersion: '9.0.x'
  containerRegistry: 'your-container-registry'
  dockerRegistryServiceConnection: 'your-docker-registry-connection'
  imageRepository: 'agency-booking-system'
  dockerfilePath: '$(Build.SourcesDirectory)/AgencyBookingSystem/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test Job'
    steps:
    - task: UseDotNet@2
      displayName: 'Setup .NET 9.0 SDK'
      inputs:
        packageType: 'sdk'
        version: '$(dotnetVersion)'
        includePreviewVersions: true # .NET 9.0 might still be in preview status
        
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        feedsToUse: 'select'
    
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-restore'
    
    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build'
        
    # Added SonarCloud analysis
    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'your-sonarcloud-connection'
        organization: 'your-sonarcloud-org'
        scannerMode: 'MSBuild'
        projectKey: 'agency-booking-system'
        projectName: 'Agency Booking System'
        
    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Analysis'
      
    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud Results'
      inputs:
        pollingTimeoutSec: '300'
    
    - task: DotNetCoreCLI@2
      displayName: 'Publish Web API'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
        
    # Added Docker build and push
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '$(Build.SourcesDirectory)'
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployWebApp
    displayName: 'Deploy Web App to Azure'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy Container to Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              appName: '$(webAppName)'
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              appSettings: |
                -ASPNETCORE_ENVIRONMENT Production
                -ConnectionStrings:IdentityDBConnection "$(IdentityDBConnection)"
                -ConnectionStrings:DefaultConnection "$(DefaultConnection)"
                -Elasticsearch:Url "$(ElasticsearchUrl)"
                -Kafka:BootstrapServers "$(KafkaBootstrapServers)"
          
          # Added health check verification
          - task: AzureCLI@2
            displayName: 'Verify Deployment Health'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Checking application health..."
                response=$(curl -s -o /dev/null -w "%{http_code}" https://$(webAppName).azurewebsites.net/health)
                if [ "$response" = "200" ]; then
                  echo "Application is healthy!"
                else
                  echo "Application health check failed with status: $response"
                  exit 1
                fi
